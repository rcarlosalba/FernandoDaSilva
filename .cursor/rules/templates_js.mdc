---
description: Reglas para la creación de templates de Django y la implementación del frontend. Se enfoca en la modularidad, la separación estricta de responsabilidades (sin lógica en templates), patrones de componentes reutilizables (modales, toasts) y el uso de JavaScript vainilla y Alpine.js.
globs: "**/*.html, **/*.js"
---

# Reglas para Templates de Django y Frontend

**Objetivo principal:** Construir interfaces de usuario limpias, modulares y mantenibles, asegurando una experiencia de usuario fluida y una estricta separación entre la estructura (HTML), la presentación (CSS) y el comportamiento (JS).

## 1. Principios Fundamentales del Template

Estas son reglas no negociables para mantener la calidad y la predictibilidad del código.

1.  **Cero Lógica en Templates:** La lógica de negocio, las condiciones complejas y la manipulación de datos están **estrictamente prohibidas** en los templates.
    -   ✅ **CORRECTO:** La vista de Django pre-procesa los datos y pasa al template variables o booleanos simples para su renderización.
    -   ❌ **INCORRECTO:** Usar etiquetas de template complejas como `{% if user.is_staff and user.profile.is_verified %}`. Esta lógica pertenece a la vista.
2.  **Cero Estilos en Línea:** El atributo `style="..."` está **estrictamente prohibido**. Todo el estilizado se maneja exclusivamente con clases de Tailwind CSS, según las reglas de Tailwind.
        ⚠️ EXCEPCIONES TÉCNICAS OBLIGATORIAS: Existen dos casos específicos donde esta regla se invierte por necesidad técnica:

        - Templates de Email: Para asegurar la máxima compatibilidad con la gran variedad de clientes de correo (Outlook, Gmail, etc.), estos templates deben utilizar un layout basado en tablas y estilos en línea (style="..."). Las clases de Tailwind y el CSS moderno son en su mayoría inútiles y poco fiables en este contexto.

        - Templates para Generación de PDF: Debido a las limitaciones de los motores de renderizado de PDF (e.g., WeasyPrint, xhtml2pdf), el estilizado debe adaptarse a lo que la librería soporte. Esto a menudo implica el uso de CSS simple dentro de una etiqueta <style> en el propio template o, en algunos casos, estilos en línea.
        
3.  **Cero Validación HTML Nativa:** Para asegurar una experiencia de usuario consistente y controlada, los atributos de validación de HTML5 (e.g., `required`, `pattern`, `minlength`) **no deben utilizarse**. La validación se gestionará del lado del servidor (con Django Forms) y en tiempo real del lado del cliente con JavaScript.
4.  **Uso de Template Tags y Filtros Personalizados:** Para la lógica de presentación que es demasiado compleja para una variable simple pero que no pertenece a la vista (e.g., formatear un precio, renderizar un badge según un estado), crearemos template tags o filtros personalizados. Esto mantiene los templates limpios y la lógica encapsulada y reutilizable, siguiendo "The Django Way".
5.  **Priorizar la Accesibilidad (a11y):** Al generar HTML, debemos usar etiquetas semánticas (`<main>`, `<nav>`, `<footer>`, `<button>`) en lugar de `div`s genéricos siempre que sea posible. Además, para componentes interactivos (como modales y menús), utilizaremos atributos ARIA (`aria-hidden`, `role`, etc.) para asegurar que la aplicación sea usable por la mayor cantidad de personas.

## 2. Arquitectura de Componentes y Modularidad

Los templates deben ser pequeños, legibles y reutilizables.

-   **Estructura Base-Bloque:** Todo el proyecto debe heredar de un template base (`templates/base.html`) que define la estructura principal del HTML, los enlaces a CSS/JS y los bloques (`{% block %}`) que las páginas hijas rellenarán.
-   **Componentes con `{% include %}`:** Las partes reutilizables de la UI (como navbars, footers, cards, sidebars) deben ser extraídas a sus propios archivos HTML en una carpeta `templates/partials/` y luego incluidas en otros templates con `{% include 'partials/nombre_componente.html' %}`. Esto mantiene los templates principales limpios y enfocados en su contenido específico.

## 3. Componentes de UI Reutilizables (HTML + JS)

Implementaremos componentes estándar para interacciones comunes.

1.  **Mensajes del Sistema (Toasts):**
    -   **Propósito:** Mostrar los mensajes del framework de Django (`messages`) como notificaciones "toast" no intrusivas.
    -   **HTML:** Se crea un componente reutilizable en `templates/partials/messages.html`. Este se incluye en `base.html`.
    -   **JavaScript:** La lógica para mostrar/ocultar los toasts, aplicar un temporizador de 4 segundos y permitir el cierre con una 'X' reside en `static/js/messages.js`.
    -   **Instrucción al LLM:** Si se solicita crear o modificar una vista que usa mensajes y estos archivos no existen, debes generar el código base para `messages.html` (con clases de Tailwind) y `messages.js`.
2.  **Modal de Confirmación/Alerta:**
    -   **Propósito:** Reemplazar el uso de `alert()` y `confirm()` del navegador para acciones críticas (como eliminar un objeto) o para mostrar información importante.
    -   **HTML:** Se crea un componente genérico en `templates/partials/modal.html`.
    -   **JavaScript:** La lógica para mostrar, ocultar y manejar las interacciones del modal reside en `static/js/modal.js`. Este JS debe ser capaz de adaptar el contenido (título, cuerpo, botones) del modal dinámicamente.
    -   **Instrucción al LLM:** Si se solicita implementar una acción de eliminación o una alerta, y estos archivos no existen, debes generar el código base para `modal.html` y `modal.js`.

## 4. JavaScript y Dinamismo

El código JavaScript debe ser claro, modular y eficiente.

-   **Enfoque Principal: JavaScript Vanilla:** La primera opción para añadir dinamismo es siempre JavaScript puro y moderno (ES6+). El código debe ser modular y legible.
-   **Uso Pragmático de Alpine.js:** Para interacciones de UI simples y contenidas que requieren manejo de estado (e.g., menús desplegables, visibilidad de elementos, pestañas), se prefiere usar Alpine.js para no "reinventar la rueda".
-   **Archivos Externos para Complejidad:** El código JS dentro de etiquetas `<script>` en los archivos HTML debe ser mínimo (idealmente, solo para inicializar o pasar datos de Django a JS). Cualquier lógica compleja debe residir en su propio archivo dentro de `static/js/`.

## 5. Gestión de Activos (Assets)

Los recursos externos se gestionarán localmente para mejorar el rendimiento y la fiabilidad.

-   **Iconos (Font Awesome):** Se utilizará la librería Font Awesome, pero los archivos (`.css`, `.js`, y webfonts) se descargarán y servirán localmente desde el directorio `static/`. No se usarán CDNs.
-   **Librerías (Alpine.js):** Al igual que con los iconos, la librería Alpine.js se descargará y servirá localmente desde `static/js/`.


### ✅ Checklist de Verificación para el LLM (Antes de Generar Respuesta)

Antes de generar un template o código frontend, verifica:

1.  **Separación de Responsabilidades:** ¿El template está libre de lógica de negocio y estilos en línea?
2.  **Modularidad:** ¿Estoy utilizando `{% include %}` para componentes reutilizables? ¿He evitado duplicar HTML?
3.  **Patrones de Componentes:** Si se necesita un mensaje o un modal, ¿estoy utilizando el patrón definido (`messages.html`/`.js`, `modal.html`/`.js`)?
4.  **JavaScript:** ¿El JS es limpio y modular? ¿He colocado la lógica compleja en un archivo `.js` externo?
5.  **Activos:** ¿Estoy asumiendo que Font Awesome y Alpine.js se sirven localmente?
6.  **Accesibilidad:** ¿He usado HTML semántico y atributos ARIA cuando es apropiado?